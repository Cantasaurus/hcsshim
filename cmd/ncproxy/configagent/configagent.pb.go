// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/Microsoft/hcsshim/cmd/ncproxy/configagent/configagent.proto

package configagent

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ConnectNamespaceToNetworkRequest struct {
	NamespaceID          string   `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	NetworkID            string   `protobuf:"bytes,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectNamespaceToNetworkRequest) Reset()      { *m = ConnectNamespaceToNetworkRequest{} }
func (*ConnectNamespaceToNetworkRequest) ProtoMessage() {}
func (*ConnectNamespaceToNetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e1d07af1346186, []int{0}
}
func (m *ConnectNamespaceToNetworkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectNamespaceToNetworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectNamespaceToNetworkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectNamespaceToNetworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectNamespaceToNetworkRequest.Merge(m, src)
}
func (m *ConnectNamespaceToNetworkRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConnectNamespaceToNetworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectNamespaceToNetworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectNamespaceToNetworkRequest proto.InternalMessageInfo

type ConnectNamespaceToNetworkResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectNamespaceToNetworkResponse) Reset()      { *m = ConnectNamespaceToNetworkResponse{} }
func (*ConnectNamespaceToNetworkResponse) ProtoMessage() {}
func (*ConnectNamespaceToNetworkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e1d07af1346186, []int{1}
}
func (m *ConnectNamespaceToNetworkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectNamespaceToNetworkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectNamespaceToNetworkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectNamespaceToNetworkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectNamespaceToNetworkResponse.Merge(m, src)
}
func (m *ConnectNamespaceToNetworkResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConnectNamespaceToNetworkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectNamespaceToNetworkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectNamespaceToNetworkResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ConnectNamespaceToNetworkRequest)(nil), "ConnectNamespaceToNetworkRequest")
	proto.RegisterType((*ConnectNamespaceToNetworkResponse)(nil), "ConnectNamespaceToNetworkResponse")
}

func init() {
	proto.RegisterFile("github.com/Microsoft/hcsshim/cmd/ncproxy/configagent/configagent.proto", fileDescriptor_89e1d07af1346186)
}

var fileDescriptor_89e1d07af1346186 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x4b, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xf7, 0xcd, 0x4c, 0x2e, 0xca, 0x2f, 0xce, 0x4f, 0x2b,
	0xd1, 0xcf, 0x48, 0x2e, 0x2e, 0xce, 0xc8, 0xcc, 0xd5, 0x4f, 0xce, 0x4d, 0xd1, 0xcf, 0x4b, 0x2e,
	0x28, 0xca, 0xaf, 0xa8, 0xd4, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0x4f, 0x4c, 0x4f, 0xcd, 0x2b,
	0x41, 0x66, 0xeb, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x4b, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83, 0x99,
	0xfa, 0x20, 0x16, 0x44, 0x54, 0xa9, 0x85, 0x91, 0x4b, 0xc1, 0x39, 0x3f, 0x2f, 0x2f, 0x35, 0xb9,
	0xc4, 0x2f, 0x31, 0x37, 0xb5, 0xb8, 0x20, 0x31, 0x39, 0x35, 0x24, 0xdf, 0x2f, 0xb5, 0xa4, 0x3c,
	0xbf, 0x28, 0x3b, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0xc8, 0x88, 0x8b, 0x27, 0x0f, 0x26,
	0x19, 0x9f, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0xe9, 0xc4, 0xff, 0xe8, 0x9e, 0x3c, 0x37,
	0x5c, 0x93, 0xa7, 0x4b, 0x10, 0x37, 0x5c, 0x91, 0x67, 0x8a, 0x90, 0x0e, 0x17, 0x57, 0x1e, 0xc4,
	0x14, 0x90, 0x0e, 0x26, 0xb0, 0x0e, 0xde, 0x47, 0xf7, 0xe4, 0x39, 0xa1, 0x66, 0x7b, 0xba, 0x04,
	0x71, 0x42, 0x15, 0x78, 0xa6, 0x28, 0x29, 0x73, 0x29, 0xe2, 0x71, 0x45, 0x71, 0x41, 0x7e, 0x5e,
	0x71, 0xaa, 0x51, 0x15, 0x97, 0x10, 0x54, 0xc8, 0x19, 0xec, 0x3b, 0x47, 0x90, 0xef, 0x84, 0x52,
	0xb8, 0x24, 0x71, 0x6a, 0x15, 0x52, 0xd4, 0x23, 0xe4, 0x39, 0x29, 0x25, 0x3d, 0x82, 0x36, 0x2b,
	0x31, 0x38, 0x45, 0x9e, 0x78, 0x28, 0xc7, 0x70, 0xe3, 0xa1, 0x1c, 0x43, 0xc3, 0x23, 0x39, 0xc6,
	0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x31, 0xca, 0x1e, 0x6f,
	0xfc, 0x64, 0xe6, 0x95, 0xa4, 0x16, 0xe5, 0x25, 0xe6, 0xe8, 0x27, 0xe7, 0xe7, 0x16, 0x94, 0x96,
	0xa4, 0x82, 0x63, 0xc4, 0x1a, 0x99, 0x13, 0xc1, 0x90, 0xc4, 0x06, 0x8e, 0x0b, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x68, 0x24, 0x8f, 0xde, 0xeb, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkConfigAgentClient is the client API for NetworkConfigAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkConfigAgentClient interface {
	ConnectNamespaceToNetwork(ctx context.Context, in *ConnectNamespaceToNetworkRequest, opts ...grpc.CallOption) (*ConnectNamespaceToNetworkResponse, error)
}

type networkConfigAgentClient struct {
	cc *grpc.ClientConn
}

func NewNetworkConfigAgentClient(cc *grpc.ClientConn) NetworkConfigAgentClient {
	return &networkConfigAgentClient{cc}
}

func (c *networkConfigAgentClient) ConnectNamespaceToNetwork(ctx context.Context, in *ConnectNamespaceToNetworkRequest, opts ...grpc.CallOption) (*ConnectNamespaceToNetworkResponse, error) {
	out := new(ConnectNamespaceToNetworkResponse)
	err := c.cc.Invoke(ctx, "/NetworkConfigAgent/ConnectNamespaceToNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkConfigAgentServer is the server API for NetworkConfigAgent service.
type NetworkConfigAgentServer interface {
	ConnectNamespaceToNetwork(context.Context, *ConnectNamespaceToNetworkRequest) (*ConnectNamespaceToNetworkResponse, error)
}

func RegisterNetworkConfigAgentServer(s *grpc.Server, srv NetworkConfigAgentServer) {
	s.RegisterService(&_NetworkConfigAgent_serviceDesc, srv)
}

func _NetworkConfigAgent_ConnectNamespaceToNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectNamespaceToNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkConfigAgentServer).ConnectNamespaceToNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NetworkConfigAgent/ConnectNamespaceToNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkConfigAgentServer).ConnectNamespaceToNetwork(ctx, req.(*ConnectNamespaceToNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkConfigAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NetworkConfigAgent",
	HandlerType: (*NetworkConfigAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectNamespaceToNetwork",
			Handler:    _NetworkConfigAgent_ConnectNamespaceToNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/Microsoft/hcsshim/cmd/ncproxy/configagent/configagent.proto",
}

func (m *ConnectNamespaceToNetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectNamespaceToNetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NamespaceID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfigagent(dAtA, i, uint64(len(m.NamespaceID)))
		i += copy(dAtA[i:], m.NamespaceID)
	}
	if len(m.NetworkID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfigagent(dAtA, i, uint64(len(m.NetworkID)))
		i += copy(dAtA[i:], m.NetworkID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConnectNamespaceToNetworkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectNamespaceToNetworkResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintConfigagent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ConnectNamespaceToNetworkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceID)
	if l > 0 {
		n += 1 + l + sovConfigagent(uint64(l))
	}
	l = len(m.NetworkID)
	if l > 0 {
		n += 1 + l + sovConfigagent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectNamespaceToNetworkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConfigagent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfigagent(x uint64) (n int) {
	return sovConfigagent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ConnectNamespaceToNetworkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnectNamespaceToNetworkRequest{`,
		`NamespaceID:` + fmt.Sprintf("%v", this.NamespaceID) + `,`,
		`NetworkID:` + fmt.Sprintf("%v", this.NetworkID) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConnectNamespaceToNetworkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnectNamespaceToNetworkResponse{`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConfigagent(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ConnectNamespaceToNetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigagent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectNamespaceToNetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectNamespaceToNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigagent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigagent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigagent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigagent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigagent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigagent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigagent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigagent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigagent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectNamespaceToNetworkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigagent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectNamespaceToNetworkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectNamespaceToNetworkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConfigagent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigagent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigagent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfigagent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfigagent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigagent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigagent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfigagent
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthConfigagent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfigagent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfigagent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthConfigagent
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfigagent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfigagent   = fmt.Errorf("proto: integer overflow")
)
